package hanu.edu.hotelsystem.services.person.model;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.util.Tuple;
import hanu.edu.hotelsystem.exceptions.DExCode;
import hanu.edu.hotelsystem.utils.DToolkit;


import java.util.Date;

@DClass(schema = "hotelsystem")
public abstract class Person {
    public static final String A_id = "id";
    public static final String A_name = "name";
    public static final String A_gender = "gender";
    public static final String A_dob = "dob";
    public static final String A_address = "address";
    public static final String A_phone_number = "phoneNum";

    @DAttr(name = A_id, id = true, auto = true, length = 6, mutable = false, type = DAttr.Type.Integer)
    private int id;

    private static int idCounter;

    @DAttr(name = A_name, type = DAttr.Type.String, length = 30, optional = false, cid = true)
    private String name;

    @DAttr(name = A_gender, type = DAttr.Type.Domain, length = 10, optional = false)
    private Gender gender;

    @DAttr(name = A_dob, type = DAttr.Type.Date, length = 15, optional = false)
    private Date dob;

    @DAttr(name = A_address, type = DAttr.Type.Domain, length = 20, optional = false)
    @DAssoc(ascName = "person-has-address", role = "person",
            ascType = DAssoc.AssocType.One2One, endType = DAssoc.AssocEndType.One,
            associate = @DAssoc.Associate(type = Address.class, cardMin = 1, cardMax = 1))
    private Address address;

    @DAttr(name = A_phone_number, type = DAttr.Type.String, length = 30, optional = false)
    private String phoneNum;

    @DOpt(type = DOpt.Type.ObjectFormConstructor)
    @DOpt(type = DOpt.Type.RequiredConstructor)
    protected Person(@AttrRef("name") String name,
                     @AttrRef("gender") Gender gender,
                     @AttrRef("dob") Date dob,
                     @AttrRef("address") Address address,
                     @AttrRef("phoneNum") String phoneNum) {
        this(null, name, gender, dob, address, phoneNum);
    }


    @DOpt(type = DOpt.Type.DataSourceConstructor)
    protected Person(Integer id,
                     String name, Gender gender,
                     Date dob, Address address,
                     String phoneNum)
            throws ConstraintViolationException {

        // assign other values
        this.id = nextID(id);
        setName(name);
        setAddress(address);
        setDob(dob);
        setGender(gender);
        setAddress(address);
        setPhoneNum(phoneNum);
    }


    public void setName(String name) {
        this.name = name;
    }

    public void setGender(Gender gender) {
        this.gender = gender;
    }

    public void setDob(Date dob) throws ConstraintViolationException {
        // additional validation on dob
        if (dob.before(DToolkit.MIN_DOB)) {
            throw new ConstraintViolationException(DExCode.INVALID_DOB, dob);
        }
        this.dob = dob;
    }

    public void setAddress(Address address) {
        this.address = address;
    }

    public void setPhoneNum(String phoneNum) {
        this.phoneNum = phoneNum;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public Gender getGender() {
        return gender;
    }

    public Date getDob() {
        return dob;
    }

    public Address getAddress() {
        return address;
    }

    public String getPhoneNum() {
        return phoneNum;
    }

    private static int nextID(Integer currID) {
        if (currID == null) {
            idCounter++;
            return idCounter;
        } else {
            int num = currID;
            if (num > idCounter)
                idCounter = num;
            return currID;
        }
    }

    /**
     * @requires minVal != null /\ maxVal != null
     * @effects update the auto-generated value of attribute <tt>attrib</tt>, specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
     */
    @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
    public static void updateAutoGeneratedValue(
            DAttr attrib,
            Tuple derivingValue,
            Object minVal,
            Object maxVal) throws ConstraintViolationException {

        if (minVal != null && maxVal != null) {
            if (attrib.name().equals("id")) {
                int maxIdVal = (Integer) maxVal;
                if (maxIdVal > idCounter)
                    idCounter = maxIdVal;
            }
        }
    }
}


